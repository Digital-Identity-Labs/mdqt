#!/usr/bin/env ruby
require 'rubygems'
require 'mdqt/cli'
require 'mdqt/version'

require 'commander'

Commander.configure do
  program :name, 'mdqt'
  program :version, MDQT::VERSION
  program :description, 'MDQ SAML metadata client'

  global_option '--verbose'

  default_command :help

  command :version do |c|
    c.syntax = 'mdqt version'
    c.description = 'Show version of MDQT'
    c.action do |args, options|
      options.default MDQT::CLI::Defaults.cli_defaults
      options.default({service: :not_required })
      MDQT::CLI::Version.run(args, options)
    end
  end

  command :get do |c|
    c.syntax = 'mdqt get [options] entityidentifier '
    c.description = 'Download one entity record or an aggregate of entity records'
    c.option '--service URL', String, 'MDQ service to search for entities. Defaults to MDQT_SERVICE or MDQ_BASE_URL env variables'
    c.option '--cache', "Cache downloads and try to fetch from cache where appropriate"
    c.option '--verify-with PATHS', Array, 'Validate downloads using specified certificates'
    c.option '--validate', 'Validate downloaded metadata against SAML2 schema (not normally needed)'
    #c.option '--stdin', 'accept one or more entity ids from STDIN'
    c.option '--all', 'Request all entity records'
    c.option '--explain', 'Show details of client request and server response'
    c.option '--tls-risky', "Don't check certificate used for TLS (usually a bad idea)"
    c.option '--save-to PATH', String, 'Write all data to files in the specified directory'
    c.option '--link-id', 'If saving files, save files with aliases (requires `--save-to`)'
    c.action do |args, options|
      options.default MDQT::CLI::Defaults.cli_defaults
      options.default({service: MDQT::CLI::Defaults.base_url }) if options.service.nil?
      MDQT::CLI::Get.run(args, options)
    end
  end

  command :reset do |c|
    c.syntax = 'mdqt reset'
    c.description = 'Delete all cached data'
    c.action do |args, options|
      options.default MDQT::CLI::Defaults.cli_defaults
      options.default({service: :not_required })
      MDQT::CLI::Reset.run(args, options)
    end
  end

  command :transform do |c|
    c.syntax = 'mdqt transform ENTITYIDS'
    c.description = 'Show transformed entity IDs'
    c.action do |args, options|
      options.default MDQT::CLI::Defaults.cli_defaults
      options.default({service: :not_required })
      MDQT::CLI::Transform.run(args, options)
    end
  end

  command :check do |c|
    c.syntax = 'mdqt check XML_FILENAME CERTIFICATE_FILENAME'
    c.description = 'Validate XML and check signatures'
    c.option '--verify-with PATHS', Array, 'Validate file using specified certificates'
    c.action do |args, options|
      options.default MDQT::CLI::Defaults.cli_defaults
      options.default({service: :not_required, validate: true })
      MDQT::CLI::Check.run(args, options)
    end
  end

end

